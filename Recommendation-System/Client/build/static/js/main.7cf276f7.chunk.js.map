{"version":3,"sources":["assets/sample.csv","components/Upload.js","components/Predict.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Upload","loading","setFile","file","handleFileUpload","useDropzone","acceptedFiles","getRootProps","getInputProps","useEffect","console","log","files","map","key","path","size","className","Spinner","animation","variant","download","href","Sample","Row","Col","length","Button","onClick","disabled","Predict","messageSize","lineCount","complaints","ipAddr","result","handleMessageSize","handleLineCount","handleComplaints","handleIpAddr","handlePredict","handleBack","Form","md","Group","controlId","Label","Control","value","onChange","type","placeholder","App","useState","step","setStep","setLoading","setResult","error","setError","errorMsg","setErrorMsg","setMessageSize","setLineCount","setComplaints","setIpAddr","postFormData","a","url","data","fetch","method","body","response","json","postRawData","headers","JSON","stringify","uploadProps","formData","FormData","append","values","res","status","Error","msg","message","predictProps","e","target","table","Result","Navbar","bg","Brand","Alert","onClose","dismissible","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7cf276f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sample.6b3b0050.csv\";","import React, { useEffect } from 'react'\nimport { useDropzone } from 'react-dropzone';\nimport Sample from './../assets/sample.csv'\nimport { Col, Row, Button, Spinner } from 'react-bootstrap';\n\nconst Upload = ({\n  loading,\n  file,\n  setFile,\n  handleFileUpload\n}) => {\n  const { acceptedFiles, getRootProps, getInputProps } = useDropzone();\n\n  useEffect(() => {\n    setFile(acceptedFiles[0])\n    console.log(\"setting file\")\n  }, [acceptedFiles])\n\n  const files = acceptedFiles.map(file => (\n    <span key={file.path}>\n      {file.path} - {file.size} bytes\n    </span>\n  ));\n\n  return (\n    <>\n      {\n        loading\n          ? <div className=\"center\">\n            <Spinner animation=\"border\" variant=\"secondary\" />\n            <p>The Model is being trained, this could take a while</p>\n          </div>\n          : < section className=\"container\" >\n            <div className=\"head\">\n\n              <h3>\n                Upload Data to train the model\n            </h3>\n              <p>Upload a .csv file to train the model, <a download href={Sample}>click here</a> to get started.</p>\n            </div>\n            <Row>\n              <Col>\n                <div {...getRootProps({ className: 'dropzone' })}>\n                  <input {...getInputProps()} />\n                  {\n                    acceptedFiles.length <= 0\n                      ? <p>Drag 'n' drop some files here, or click to select files</p>\n                      : <p>{files[0]}</p>\n                  }\n                </div>\n              </Col>\n            </Row>\n            <Row className=\"center footer\">\n              <Button onClick={handleFileUpload} disabled={acceptedFiles.length <= 0} variant=\"secondary\">Upload</Button>\n            </Row>\n          </section >\n      }\n    </>\n  );\n}\n\nexport default Upload\n","import React from 'react'\nimport { Form, Spinner, Row, Col, Button } from 'react-bootstrap'\n\nconst Predict = ({\n  loading,\n  messageSize,\n  lineCount,\n  complaints,\n  ipAddr,\n  result,\n  handleMessageSize,\n  handleLineCount,\n  handleComplaints,\n  handleIpAddr,\n  handlePredict,\n  handleBack\n}) => {\n  return (\n    <>\n      {\n        loading\n          ? <div className=\"center\">\n            <Spinner animation=\"border\" variant=\"secondary\" />\n            <p>Predicting...</p>\n          </div>\n          : < section className=\"container\" >\n            <div className=\"head\">\n              <h3>\n                Predict\n            </h3>\n              <p>Fill the fields below to predict the model you've trained.</p>\n            </div>\n            <Form>\n              <Row>\n                <Col md={6}>\n                  <Form.Group controlId=\"exampleForm.ControlInput1\">\n                    <Form.Label>Message Size</Form.Label>\n                    <Form.Control value={messageSize} onChange={handleMessageSize} type=\"number\" placeholder=\"enter message size\" />\n                  </Form.Group>\n                </Col>\n                <Col md={6}>\n                  <Form.Group controlId=\"exampleForm.ControlInput2\">\n                    <Form.Label>Incoming Header Lines Count</Form.Label>\n                    <Form.Control value={lineCount} onChange={handleLineCount} type=\"number\" placeholder=\"enter incoming header line size count\" />\n                  </Form.Group>\n                </Col>\n                <Col md={6}>\n                  <Form.Group controlId=\"exampleForm.ControlInput3\">\n                    <Form.Label>Number of Complaints (BCL)</Form.Label>\n                    <Form.Control value={complaints} onChange={handleComplaints} type=\"number\" placeholder=\"enter number of complaints\" />\n                  </Form.Group>\n                </Col>\n                <Col md={6}>\n                  <Form.Group controlId=\"exampleForm.ControlInput4\">\n                    <Form.Label>Sender IP</Form.Label>\n                    <Form.Control value={ipAddr} onChange={handleIpAddr} type=\"number\" placeholder=\"enter sender's IP\" />\n                  </Form.Group>\n                </Col>\n              </Row>\n            </Form>\n            <Row className=\"center footer\">\n              <Button onClick={handleBack} variant=\"outline-secondary\">Back</Button>\n              &nbsp;&nbsp;&nbsp;\n              <Button onClick={handlePredict} variant=\"secondary\">Predict</Button>\n            </Row>\n            {\n              result\n                ? <div className=\"result-card\">\n                  <div>\n                    <h3>\n                      Result\n                    </h3>\n                    <p>\n                      {\n                        result === \"Yes\"\n                          ? \"Okay\"\n                          : \"Not Okay\"\n                      }\n                    </p>\n                  </div>\n                </div>\n                : null\n            }\n          </section >\n      }\n    </>\n  )\n}\n\nexport default Predict\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { Navbar, Container, Row, Col, Alert } from 'react-bootstrap';\nimport Upload from './components/Upload';\nimport Predict from './components/Predict';\n\nfunction App() {\n  const [step, setStep] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(\"\")\n\n  const [error, setError] = useState(false);\n  const [errorMsg, setErrorMsg] = useState(\"\")\n\n  const [file, setFile] = useState(\"\")\n\n  const [messageSize, setMessageSize] = useState(\"\");\n  const [lineCount, setLineCount] = useState(\"\");\n  const [complaints, setComplaints] = useState(\"\");\n  const [ipAddr, setIpAddr] = useState(\"\");\n\n  const handleMessageSize = (e) => {\n    setMessageSize(e.target.value)\n  }\n  const handleLineCount = (e) => {\n    setLineCount(e.target.value)\n\n  }\n  const handleComplaints = (e) => {\n    setComplaints(e.target.value)\n\n  }\n  const handleIpAddr = (e) => {\n    setIpAddr(e.target.value)\n  }\n\n  const handleFileUpload = async () => {\n    setLoading(true)\n    setError(false);\n    setErrorMsg(\"\")\n\n    let formData = new FormData();\n    // let blob = new Blob([file], { type: \"text/csv\" });\n    formData.append(\"file\", file);\n\n    try {\n      console.log(\"data before sending -->\")\n      for (var value of formData.values()) {\n        console.log(\"value 1\", value);\n      }\n      const res = await postFormData('http://100.25.140.154:5000/api/data', formData);\n      console.log(\"res -->\", res);\n      if (res.status === \"200\") {\n        setLoading(false)\n        setStep(step + 1)\n      }\n      else {\n        throw new Error(res.msg)\n      }\n    }\n    catch (err) {\n      setLoading(false)\n      setError(true);\n      setErrorMsg(err.message)\n      console.log(\"error -->\", err)\n    }\n  }\n\n  const handlePredict = async () => {\n    setError(false);\n    setErrorMsg(\"\");\n    setResult(\"\");\n    if (messageSize && lineCount && complaints) {\n      console.log(\"message size -->\", messageSize, \"message size -->\", lineCount, \"message size -->\", complaints, \"message size -->\", ipAddr)\n      setLoading(true);\n      const data = {\n        \"Message_Size\": messageSize,\n        \"Incoming_Header_lines_Count\": lineCount,\n        \"Number_of_complaints_(BCL)\": complaints,\n        \"Sender_IP\": \"192.18.0.1\"\n      }\n      console.table(data)\n      console.log(JSON.stringify(data))\n      try {\n        const res = await postRawData('http://100.25.140.154:5000/api/pred', data);\n        console.log(\"res -->\", res);\n        setLoading(false);\n        setResult(res.Result);\n        setMessageSize(\"\");\n        setLineCount(\"\");\n        setComplaints(\"\");\n        setIpAddr(\"\");\n      }\n      catch (err) {\n        setLoading(false)\n        setError(true);\n        setErrorMsg(err.message)\n      }\n    }\n    else {\n      setError(true);\n      setErrorMsg(\"All fields must be filled\")\n      console.log(\"empty\")\n    }\n  }\n\n  const handleBack = () => {\n    setStep(step - 1);\n    setResult(\"\")\n  }\n\n  // Example POST method implementation with form data\n  async function postFormData(url = '', data = {}) {\n    console.log(\"data -->\", data)\n    const response = await fetch(url, {\n      method: 'POST',\n      // headers: {\n      //   'Content-Type': 'multipart/form-data'\n      // },\n      body: data\n    });\n    return response.json();\n  }\n\n  // Example POST method implementation with raw data\n  async function postRawData(url = '', data = {}) {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    return response.json();\n  }\n\n  const uploadProps = {\n    loading,\n    file,\n    setFile,\n    handleFileUpload\n  }\n\n  const predictProps = {\n    loading,\n    messageSize,\n    lineCount,\n    complaints,\n    ipAddr,\n    result,\n    handleMessageSize,\n    handleLineCount,\n    handleComplaints,\n    handleIpAddr,\n    handlePredict,\n    handleBack\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Spam Filter</Navbar.Brand>\n      </Navbar>\n      {\n        error\n          ? <Alert variant=\"danger\" onClose={() => { setError(false); setErrorMsg(\"\") }} dismissible>\n            {errorMsg}\n          </Alert>\n          : null\n      }\n      <Container>\n        <Row>\n          <Col>\n            <div className=\"content-card\">\n              {\n                step === 0 ?\n                  <Upload {...uploadProps} />\n                  : step === 1 ?\n                    <Predict {...predictProps} />\n                    : null\n              }\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}